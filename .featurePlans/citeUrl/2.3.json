{
  "id": "2.3",
  "title": "Embed Default YAML Templates as Resources",
  "objective": "Copy 5 YAML template files from Python source and embed them as assembly resources with loader utility",
  "complexity": "simple",
  "phaseId": "2",
  "taskNumber": 3,
  "totalTasksInPhase": 3,

  "metadata": {
    "taskType": "configuration",
    "estimatedDuration": "2-3 hours",
    "dependencies": ["2.2"],
    "requiredContext": [
      "YamlLoader from Task 2.2",
      "Python citeurl repository location"
    ],
    "skillLevel": "beginner-intermediate"
  },

  "contextManagement": {
    "isFirstInPhase": false,
    "isLastInPhase": true,
    "requiredContext": [
      "YamlLoader.LoadYaml() method",
      "Python citeurl source location for YAML files"
    ],
    "contextToPreserve": [
      "5 embedded YAML resource files",
      "ResourceLoader utility class",
      "Template count per YAML file"
    ],
    "phaseBoundaryInstructions": "**PHASE 2 COMPLETE** - After this task, create comprehensive Phase 2 summary document (ingestion_phaseBoundary_phase2_[timestamp].md) with:\n- Template system fully functional\n- All 5 YAML files loaded and parsed\n- Template count per file\n- Readiness checklist for Phase 3\n\n**MANDATORY: STOP after Phase 2 and wait for user approval before proceeding to Phase 3.**"
  },

  "criticalAnchors": [
    "IMMUTABLE: Files must be embedded resources (Build Action: EmbeddedResource)",
    "IMMUTABLE: Preserve YAML structure exactly from Python source",
    "IMMUTABLE: File naming: lowercase with hyphens",
    "IMMUTABLE: 5 files: caselaw.yaml, general-federal-law.yaml, specific-federal-laws.yaml, state-law.yaml, secondary-sources.yaml",
    "IMMUTABLE: Python source location: /c/Users/tlewers/source/repos/citeurl/"
  ],

  "agentInstructions": "## Task 2.3: Embed Default YAML Templates as Resources\n\n### Overview\nYou will copy 5 YAML template files from the Python citeurl repository and embed them as resources in the CiteUrl.Core assembly.\n\n### Step-by-Step Instructions\n\n#### STEP 1: Verify Python Source Location\n\n```bash\nls /c/Users/tlewers/source/repos/citeurl/citeurl/templates/\n```\n\nExpected files:\n- caselaw.yaml\n- general federal law.yaml\n- specific federal laws.yaml\n- state law.yaml\n- secondary sources.yaml\n\n#### STEP 2: Copy YAML Files to Resources Directory\n\n```bash\n# Copy with renamed filenames (spaces → hyphens)\ncp \"/c/Users/tlewers/source/repos/citeurl/citeurl/templates/caselaw.yaml\" \\\n   \"src/CiteUrl.Core/Templates/Resources/caselaw.yaml\"\n\ncp \"/c/Users/tlewers/source/repos/citeurl/citeurl/templates/general federal law.yaml\" \\\n   \"src/CiteUrl.Core/Templates/Resources/general-federal-law.yaml\"\n\ncp \"/c/Users/tlewers/source/repos/citeurl/citeurl/templates/specific federal laws.yaml\" \\\n   \"src/CiteUrl.Core/Templates/Resources/specific-federal-laws.yaml\"\n\ncp \"/c/Users/tlewers/source/repos/citeurl/citeurl/templates/state law.yaml\" \\\n   \"src/CiteUrl.Core/Templates/Resources/state-law.yaml\"\n\ncp \"/c/Users/tlewers/source/repos/citeurl/citeurl/templates/secondary sources.yaml\" \\\n   \"src/CiteUrl.Core/Templates/Resources/secondary-sources.yaml\"\n```\n\n**Note**: Verify .csproj already includes `<EmbeddedResource Include=\"Templates\\Resources\\*.yaml\" />` from Task 1.1.\n\n#### STEP 3: Create ResourceLoader Utility\n\n**Create `src/CiteUrl.Core/Utilities/ResourceLoader.cs`:**\n\n```csharp\nusing System.Reflection;\nusing CiteUrl.Core.Exceptions;\nusing Serilog;\n\nnamespace CiteUrl.Core.Utilities;\n\n/// <summary>\n/// Loads embedded YAML template resources from the assembly.\n/// </summary>\npublic static class ResourceLoader\n{\n    private static readonly ILogger? Logger = Log.Logger;\n\n    /// <summary>\n    /// Gets the names of all embedded YAML template resources.\n    /// </summary>\n    public static string[] GetEmbeddedYamlResourceNames()\n    {\n        var assembly = typeof(ResourceLoader).Assembly;\n        return assembly.GetManifestResourceNames()\n            .Where(name => name.EndsWith(\".yaml\", StringComparison.OrdinalIgnoreCase))\n            .ToArray();\n    }\n\n    /// <summary>\n    /// Loads an embedded YAML resource by name.\n    /// </summary>\n    /// <param name=\"resourceName\">Simple name like \"caselaw.yaml\" or full resource name.</param>\n    /// <returns>YAML content as string.</returns>\n    /// <exception cref=\"CiteUrlYamlException\">Thrown if resource not found.</exception>\n    public static string LoadEmbeddedYaml(string resourceName)\n    {\n        var assembly = typeof(ResourceLoader).Assembly;\n        \n        // Try exact match first\n        var fullResourceName = resourceName;\n        \n        // If not a full resource name, search for it\n        if (!resourceName.Contains(\".\", StringComparison.Ordinal) || \n            !assembly.GetManifestResourceNames().Contains(resourceName))\n        {\n            var matching = assembly.GetManifestResourceNames()\n                .Where(name => name.EndsWith(resourceName, StringComparison.OrdinalIgnoreCase))\n                .ToArray();\n\n            if (matching.Length == 0)\n            {\n                throw new CiteUrlYamlException(\n                    $\"Embedded resource '{resourceName}' not found. \" +\n                    $\"Available resources: {string.Join(\", \", GetEmbeddedYamlResourceNames())}\");\n            }\n\n            if (matching.Length > 1)\n            {\n                throw new CiteUrlYamlException(\n                    $\"Ambiguous resource name '{resourceName}'. Matches: {string.Join(\", \", matching)}\");\n            }\n\n            fullResourceName = matching[0];\n        }\n\n        using var stream = assembly.GetManifestResourceStream(fullResourceName);\n        \n        if (stream == null)\n        {\n            throw new CiteUrlYamlException($\"Failed to load embedded resource: {fullResourceName}\");\n        }\n\n        using var reader = new StreamReader(stream);\n        var content = reader.ReadToEnd();\n        \n        Logger?.Debug(\"Loaded embedded YAML resource: {ResourceName} ({Bytes} bytes)\",\n            resourceName, content.Length);\n        \n        return content;\n    }\n\n    /// <summary>\n    /// Loads all default embedded YAML templates.\n    /// </summary>\n    /// <returns>Combined YAML content from all 5 default files.</returns>\n    public static string LoadAllDefaultYaml()\n    {\n        var defaultFiles = new[]\n        {\n            \"caselaw.yaml\",\n            \"general-federal-law.yaml\",\n            \"specific-federal-laws.yaml\",\n            \"state-law.yaml\",\n            \"secondary-sources.yaml\"\n        };\n\n        var combined = new System.Text.StringBuilder();\n        \n        foreach (var file in defaultFiles)\n        {\n            var content = LoadEmbeddedYaml(file);\n            combined.AppendLine(content);\n            combined.AppendLine(); // Separate YAML documents\n        }\n\n        Logger?.Information(\"Loaded {FileCount} default YAML template files\", defaultFiles.Length);\n        \n        return combined.ToString();\n    }\n}\n```\n\n#### STEP 4: Create Unit Tests\n\n**Create `tests/CiteUrl.Core.Tests/Utilities/ResourceLoaderTests.cs`:**\n\n```csharp\nusing CiteUrl.Core.Utilities;\nusing CiteUrl.Core.Exceptions;\nusing Shouldly;\nusing Xunit;\n\nnamespace CiteUrl.Core.Tests.Utilities;\n\npublic class ResourceLoaderTests\n{\n    [Fact]\n    public void GetEmbeddedYamlResourceNames_ReturnsAllYamlFiles()\n    {\n        // Act\n        var resourceNames = ResourceLoader.GetEmbeddedYamlResourceNames();\n\n        // Assert\n        resourceNames.Length.ShouldBeGreaterThanOrEqualTo(5);\n        resourceNames.ShouldContain(name => name.EndsWith(\"caselaw.yaml\"));\n        resourceNames.ShouldContain(name => name.EndsWith(\"general-federal-law.yaml\"));\n        resourceNames.ShouldContain(name => name.EndsWith(\"specific-federal-laws.yaml\"));\n        resourceNames.ShouldContain(name => name.EndsWith(\"state-law.yaml\"));\n        resourceNames.ShouldContain(name => name.EndsWith(\"secondary-sources.yaml\"));\n    }\n\n    [Theory]\n    [InlineData(\"caselaw.yaml\")]\n    [InlineData(\"general-federal-law.yaml\")]\n    [InlineData(\"specific-federal-laws.yaml\")]\n    [InlineData(\"state-law.yaml\")]\n    [InlineData(\"secondary-sources.yaml\")]\n    public void LoadEmbeddedYaml_LoadsEachDefaultFile(string fileName)\n    {\n        // Act\n        var content = ResourceLoader.LoadEmbeddedYaml(fileName);\n\n        // Assert\n        content.ShouldNotBeNullOrEmpty();\n        content.Length.ShouldBeGreaterThan(100); // YAML files should be substantial\n    }\n\n    [Fact]\n    public void LoadEmbeddedYaml_ThrowsOnNonExistentResource()\n    {\n        // Act & Assert\n        Should.Throw<CiteUrlYamlException>(() => \n            ResourceLoader.LoadEmbeddedYaml(\"nonexistent.yaml\"));\n    }\n\n    [Fact]\n    public void LoadAllDefaultYaml_CombinesAllFiles()\n    {\n        // Act\n        var combined = ResourceLoader.LoadAllDefaultYaml();\n\n        // Assert\n        combined.ShouldNotBeNullOrEmpty();\n        combined.Length.ShouldBeGreaterThan(1000); // Combined should be large\n    }\n\n    [Fact]\n    public void LoadAllDefaultYaml_AndParse_LoadsAllTemplates()\n    {\n        // Act\n        var yaml = ResourceLoader.LoadAllDefaultYaml();\n        var templates = YamlLoader.LoadYaml(yaml, \"default-templates\");\n\n        // Assert\n        templates.Count.ShouldBeGreaterThan(50); // Should have 60+ templates across all files\n        \n        // Verify some known templates exist\n        templates.ShouldContainKey(\"U.S. Code\");\n        templates.ShouldContainKey(\"Federal Register\");\n    }\n}\n```\n\n#### STEP 5: Build and Run Tests\n\n```bash\ndotnet build\ndotnet test --verbosity normal\n```\n\nAll tests should pass, including loading all 5 YAML files.\n\n#### STEP 6: Verify Template Counts\n\n**Create a quick verification script to count templates per file:**\n\n```bash\n# Count templates in each YAML file (templates are top-level keys)\nfor file in src/CiteUrl.Core/Templates/Resources/*.yaml; do\n  echo \"$file:\"\n  grep -c '^[A-Za-z]' \"$file\" || echo \"0\"\ndone\n```\n\nExpected counts (approximate):\n- caselaw.yaml: ~3 templates\n- general-federal-law.yaml: ~15 templates\n- specific-federal-laws.yaml: ~10 templates\n- state-law.yaml: ~60+ templates (all 50 states + territories)\n- secondary-sources.yaml: ~3 templates\n\n#### STEP 7: Create Phase 2 Boundary Summary\n\n**Create `.featurePlans/CiteUrl/ingestion_phaseBoundary_phase2_[timestamp].md`:**\n\n```markdown\n# Phase 2 Boundary Summary: Template System & Regex Compilation\n**Phase**: 2 of 4  \n**Completed**: [Current Date]  \n**Status**: ✅ COMPLETE\n\n## Tasks Completed\n\n### Task 2.1: Implement Template Class\n- ✅ Template class with compiled regexes\n- ✅ Pattern replacement logic ({token} → regex groups)\n- ✅ Template inheritance via Inherit() method\n- ✅ Broad vs. normal regex distinction\n- ✅ 1-second regex timeout (Gap Decision #4)\n- ✅ Immutable collections for thread safety\n- ✅ 5+ unit tests passing\n\n### Task 2.2: YAML Template Deserialization\n- ✅ Custom exception hierarchy (CiteUrlYamlException, etc.)\n- ✅ YamlDotNet integration\n- ✅ YAML model classes (TemplateYaml, TokenTypeYaml, etc.)\n- ✅ YamlLoader with inheritance resolution\n- ✅ Strict error handling (throw on YAML errors)\n- ✅ Serilog logging integration\n- ✅ 5+ unit tests passing\n\n### Task 2.3: Embed Default YAML Templates\n- ✅ 5 YAML files copied from Python source\n- ✅ Embedded as assembly resources\n- ✅ ResourceLoader utility class\n- ✅ All 5 files load and parse successfully\n- ✅ 60+ templates loaded across all files\n- ✅ 5+ unit tests passing\n\n## Test Coverage Metrics\n- **Total Tests**: 45+ (Phase 1 + Phase 2)\n- **All Passing**: ✅ Yes\n- **Coverage**: >85% for core classes\n- **No Warnings**: ✅ Confirmed\n\n## Template Counts by File\n- **caselaw.yaml**: ~3 templates\n- **general-federal-law.yaml**: ~15 templates\n- **specific-federal-laws.yaml**: ~10 templates\n- **state-law.yaml**: ~60 templates (all US states)\n- **secondary-sources.yaml**: ~3 templates\n- **Total**: ~90+ citation templates\n\n## Classes Implemented (Phase 2)\n1. `Template` (class) - Citation pattern matching with compiled regexes\n2. `CiteUrlException` hierarchy - Custom exceptions for error handling\n3. `YamlModels` - YAML deserialization classes\n4. `YamlLoader` (static class) - YAML loading and conversion\n5. `ResourceLoader` (static class) - Embedded resource loading\n\n## Deviations from Plan\nNone - all implementations match original specification.\n\n## Readiness for Phase 3\n\n**Ready**: ✅ YES\n\n**Prerequisites Met**:\n- [x] Template system fully functional\n- [x] All 5 YAML files embedded and loading\n- [x] Regex compilation working with timeout\n- [x] Template inheritance resolving correctly\n- [x] Error handling implemented (strict YAML loading)\n- [x] Test coverage >80%\n\n**Phase 3 Dependencies**:\n- Template class (available)\n- Token system (available from Phase 1)\n- StringBuilder (available from Phase 1)\n- YAML templates (available)\n\n## Next Phase Preview\n\n**Phase 3: Citation Parsing & Citator**\n- Task 3.1: Implement Citation record with parent/child relationships\n- Task 3.2: Implement Citator class (main orchestrator)\n- Task 3.3: Implement Authority grouping\n\nEstimated Duration: 1.5 weeks\n\n---\n\n**⚠️ MANDATORY STOP - Awaiting user approval to proceed to Phase 3**\n```\n\n### Verification Checklist\n- [ ] All 5 YAML files copied to Resources/ directory\n- [ ] Files embedded as assembly resources\n- [ ] ResourceLoader can read all 5 files\n- [ ] YAML content matches Python source exactly\n- [ ] No YAML parsing errors\n- [ ] Template count ~90+ across all files\n- [ ] All tests pass (50+ total)\n- [ ] Phase 2 boundary summary created\n\n### Post-Task Actions\n**STOP HERE** - Do not proceed to Phase 3 without explicit user approval.",

  "successCriteria": [
    "All 5 YAML files exist in src/CiteUrl.Core/Templates/Resources/",
    "Files are marked as EmbeddedResource in .csproj",
    "YAML content matches Python source files exactly",
    "ResourceLoader.LoadEmbeddedYaml() loads each file successfully",
    "ResourceLoader.LoadAllDefaultYaml() combines all 5 files",
    "YamlLoader parses combined YAML without errors",
    "Template count ~90+ across all files",
    "All 5+ ResourceLoader tests pass",
    "Phase 2 boundary summary document created",
    "No compilation warnings"
  ],

  "pauseAndAskScenarios": [
    "If Python source repository not found at expected location",
    "If YAML files have been modified/updated in Python source"
  ],

  "executionControls": {
    "scopeAndBoundaries": {
      "mustImplement": [
        "Copy all 5 YAML files from Python source",
        "Rename files with hyphens instead of spaces",
        "Embed as assembly resources",
        "Create ResourceLoader utility",
        "Verify all files parse correctly",
        "Phase 2 boundary summary document"
      ],
      "mustNotImplement": [
        "Do not modify YAML file contents",
        "Do not skip any of the 5 files",
        "Do not proceed to Phase 3 without user approval"
      ],
      "flexible": [
        "ResourceLoader internal implementation",
        "Test file structure",
        "Phase summary formatting"
      ]
    },
    "phaseBoundaryProtocol": {
      "mandatory": true,
      "actions": [
        "Create ingestion_phaseBoundary_phase2_[timestamp].md",
        "Include template counts per file",
        "Report total test count and coverage",
        "List all Phase 2 deliverables",
        "Provide readiness checklist for Phase 3",
        "STOP and wait for user approval"
      ]
    },
    "riskFactors": [
      {
        "risk": "Python repository may not be at expected location",
        "mitigation": "Verify path before copying, ask user if not found",
        "severity": "medium"
      },
      {
        "risk": "YAML files may contain Python-specific syntax",
        "mitigation": "Test parsing immediately after copying",
        "severity": "low"
      }
    ],
    "qualityGates": [
      "All 5 files must load and parse without errors",
      "Template count must be >80",
      "All tests must pass",
      "Phase boundary document created"
    ]
  },

  "associatedArtifacts": [
    {
      "type": "embedded_resource",
      "path": "src/CiteUrl.Core/Templates/Resources/caselaw.yaml",
      "description": "Case law citation templates"
    },
    {
      "type": "embedded_resource",
      "path": "src/CiteUrl.Core/Templates/Resources/general-federal-law.yaml",
      "description": "USC, CFR, Constitution templates"
    },
    {
      "type": "embedded_resource",
      "path": "src/CiteUrl.Core/Templates/Resources/specific-federal-laws.yaml",
      "description": "Federal rules and regulations"
    },
    {
      "type": "embedded_resource",
      "path": "src/CiteUrl.Core/Templates/Resources/state-law.yaml",
      "description": "All 50 states + territories"
    },
    {
      "type": "embedded_resource",
      "path": "src/CiteUrl.Core/Templates/Resources/secondary-sources.yaml",
      "description": "Law reviews, restatements"
    },
    {
      "type": "source_file",
      "path": "src/CiteUrl.Core/Utilities/ResourceLoader.cs",
      "description": "Utility for loading embedded YAML resources"
    },
    {
      "type": "test_file",
      "path": "tests/CiteUrl.Core.Tests/Utilities/ResourceLoaderTests.cs",
      "description": "Unit tests for ResourceLoader"
    },
    {
      "type": "phase_boundary",
      "path": ".featurePlans/CiteUrl/ingestion_phaseBoundary_phase2_[timestamp].md",
      "description": "Comprehensive Phase 2 completion summary"
    }
  ]
}
