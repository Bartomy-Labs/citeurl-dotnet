{
  "id": "4.1",
  "title": "Implement InsertLinks Method",
  "objective": "Replace citations in text with HTML/Markdown hyperlinks, preserving original text positions and handling inline markup",
  "complexity": "moderate",
  "phaseId": "4",
  "taskNumber": 1,
  "totalTasksInPhase": 4,

  "metadata": {
    "taskType": "implementation",
    "estimatedDuration": "4-5 hours",
    "dependencies": ["3.2"],
    "skillLevel": "intermediate"
  },

  "contextManagement": {
    "isFirstInPhase": true,
    "isLastInPhase": false,
    "requiredContext": [
      "Phase 3 completion summary",
      "Citator.ListCitations() method",
      "Citation.Url property"
    ]
  },

  "criticalAnchors": [
    "IMMUTABLE: Preserve original text positions while inserting links",
    "IMMUTABLE: Support HTML and Markdown output formats",
    "IMMUTABLE: Handle inline markup (strip temporarily, restore after)",
    "IMMUTABLE: Optional: skip citations without URLs, skip redundant links"
  ],

  "agentInstructions": "## Task 4.1: Implement InsertLinks Method\n\n### Implementation in Citator.cs\n\n```csharp\npublic string InsertLinks(string text, Dictionary<string, string>? attrs = null,\n    bool addTitle = true, bool urlOptional = false, bool redundantLinks = true,\n    Regex? idBreaks = null, bool ignoreMarkup = true, string markupFormat = \"html\")\n{\n    var citations = ListCitations(text, idBreaks).ToList();\n    var offset = 0;\n    var result = new System.Text.StringBuilder(text);\n    string? lastUrl = null;\n\n    foreach (var citation in citations)\n    {\n        if (citation.Url == null && !urlOptional)\n            continue;\n\n        if (!redundantLinks && citation.Url == lastUrl)\n            continue;\n\n        var link = markupFormat.ToLower() == \"markdown\"\n            ? $\"[{citation.Text}]({citation.Url})\"\n            : BuildHtmlLink(citation, attrs, addTitle);\n\n        var start = citation.Span.Start + offset;\n        result.Remove(start, citation.Text.Length);\n        result.Insert(start, link);\n        offset += link.Length - citation.Text.Length;\n        lastUrl = citation.Url;\n    }\n\n    return result.ToString();\n}\n\nprivate string BuildHtmlLink(Citation citation, Dictionary<string, string>? attrs, bool addTitle)\n{\n    var attrStr = attrs != null\n        ? string.Join(\" \", attrs.Select(kv => $\"{kv.Key}=\\\"{kv.Value}\\\"\"))\n        : \"class=\\\"citation\\\"\";\n\n    var title = addTitle && citation.Name != null\n        ? $\" title=\\\"{citation.Name}\\\"\"\n        : \"\";\n\n    return $\"<a href=\\\"{citation.Url}\\\"{title} {attrStr}>{citation.Text}</a>\";\n}\n```\n\n### Tests\n\n```csharp\n[Fact]\npublic void InsertLinks_CreatesHtmlLinks()\n{\n    var text = \"See 42 U.S.C. ยง 1983.\";\n    var result = Citator.Default.InsertLinks(text);\n    result.ShouldContain(\"<a href\");\n    result.ShouldContain(\"1983\");\n}\n\n[Fact]\npublic void InsertLinks_CreatesMarkdownLinks()\n{\n    var text = \"See 42 U.S.C. ยง 1983.\";\n    var result = Citator.Default.InsertLinks(text, markupFormat: \"markdown\");\n    result.ShouldContain(\"[\")\n        .ShouldContain(\"](\");\n}\n```\n\n### Verification\n- [ ] HTML links inserted correctly\n- [ ] Markdown links work\n- [ ] Attributes configurable\n- [ ] Tests pass",

  "successCriteria": [
    "InsertLinks() creates HTML links with configurable attributes",
    "Markdown format supported",
    "Redundant link skipping works",
    "URL-less citations can be skipped",
    "All 5+ InsertLinks tests pass"
  ],

  "associatedArtifacts": [
    {
      "type": "source_update",
      "path": "src/CiteUrl.Core/Templates/Citator.cs",
      "description": "InsertLinks implementation"
    },
    {
      "type": "test_file",
      "path": "tests/CiteUrl.Core.Tests/Templates/CitatorInsertLinksTests.cs",
      "description": "InsertLinks tests"
    }
  ]
}
