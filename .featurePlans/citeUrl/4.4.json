{
  "id": "4.4",
  "title": "NuGet Packaging, DI Extensions, and Release Preparation",
  "objective": "Package both Core and DI Extensions as NuGet packages, test local installation, create DI integration, and prepare for publishing",
  "complexity": "moderate",
  "phaseId": "4",
  "taskNumber": 4,
  "totalTasksInPhase": 4,

  "metadata": {
    "taskType": "packaging",
    "estimatedDuration": "5-6 hours",
    "dependencies": ["4.3"],
    "skillLevel": "intermediate"
  },

  "contextManagement": {
    "isFirstInPhase": false,
    "isLastInPhase": true,
    "phaseBoundaryInstructions": "**PHASE 4 COMPLETE - PROJECT COMPLETE!** Create comprehensive final summary with total metrics, NuGet package status, and post-launch checklist."
  },

  "criticalAnchors": [
    "IMMUTABLE: Version 1.0.0 for initial release",
    "IMMUTABLE: Create CiteUrl.Extensions.DependencyInjection with services.AddCiteUrl()",
    "IMMUTABLE: Include XML docs in package",
    "IMMUTABLE: README.md displayed on NuGet.org"
  ],

  "agentInstructions": "## Task 4.4: NuGet Packaging and DI Extensions\n\n### Step 1: Implement DI Extensions\n\n**Create `src/CiteUrl.Extensions.DependencyInjection/ServiceCollectionExtensions.cs`:**\n\n```csharp\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Options;\nusing CiteUrl.Core.Templates;\n\nnamespace CiteUrl.Extensions.DependencyInjection;\n\npublic static class ServiceCollectionExtensions\n{\n    public static IServiceCollection AddCiteUrl(this IServiceCollection services,\n        Action<CiteUrlOptions>? configure = null)\n    {\n        if (configure != null)\n        {\n            services.Configure(configure);\n        }\n\n        services.AddSingleton<ICitator>(sp =>\n        {\n            var options = sp.GetService<IOptions<CiteUrlOptions>>()?.Value \n                ?? new CiteUrlOptions();\n            \n            if (options.UseDefaultTemplates)\n            {\n                return Citator.Default;\n            }\n            \n            // Custom YAML loading logic here if needed\n            return Citator.Default;\n        });\n\n        return services;\n    }\n}\n\npublic class CiteUrlOptions\n{\n    public bool UseDefaultTemplates { get; set; } = true;\n    public TimeSpan RegexTimeout { get; set; } = TimeSpan.FromSeconds(1);\n    public string[]? CustomYamlPaths { get; set; }\n}\n```\n\n### Step 2: Package Both Projects\n\n```bash\ndotnet pack src/CiteUrl.Core -c Release\ndotnet pack src/CiteUrl.Extensions.DependencyInjection -c Release\n```\n\n### Step 3: Test Local Installation\n\n```bash\n# Create test project\nmkdir test-install && cd test-install\ndotnet new console\ndotnet add package CiteUrl.Core --source ../src/CiteUrl.Core/bin/Release\n\n# Test it works\ncat > Program.cs << 'EOF'\nusing CiteUrl.Core;\n\nvar citation = Citator.Cite(\"42 U.S.C. Â§ 1983\");\nConsole.WriteLine($\"Found: {citation?.Text}\");\nConsole.WriteLine($\"URL: {citation?.Url}\");\nEOF\n\ndotnet run\n```\n\n### Step 4: Create CHANGELOG.md\n\n```markdown\n# Changelog\n\n## [1.0.0] - 2025-XX-XX\n\n### Added\n- Initial release\n- 130+ citation templates\n- Full feature parity with Python citeurl\n- Thread-safe immutable design\n- Streaming enumeration\n- DI extensions package\n- Regex timeout protection\n- Serilog integration\n\n### Security\n- ReDoS protection with 1-second regex timeout\n```\n\n### Step 5: Create Final Completion Summary\n\n**Create `.featurePlans/CiteUrl/ingestion_completionSummary_[timestamp].md`:**\n\n```markdown\n# CiteUrl.NET - Complete Implementation Summary\n\n**Status**: âœ… COMPLETE  \n**Total Duration**: [Actual time]  \n**Methodology**: L.E.A.S.H. v13.0.1 with Gap Analysis\n\n## Final Metrics\n\n- **Total Tasks**: 13 (4 phases)\n- **Test Count**: 75+ tests\n- **Test Coverage**: >85%\n- **Template Count**: 90+ citations\n- **Lines of Code**: ~5000\n- **NuGet Packages**: 2 (Core + DI Extensions)\n\n## All Phases Complete\n\n### Phase 1: Foundation & Token System âœ…\n- TokenType, TokenOperation, StringBuilder\n- 25+ tests passing\n\n### Phase 2: Template System & Regex Compilation âœ…\n- Template class with inheritance\n- YAML deserialization\n- 5 embedded YAML files (90+ templates)\n- 45+ tests passing\n\n### Phase 3: Citation Parsing & Citator âœ…\n- Citation record\n- Citator orchestrator\n- Authority grouping\n- 60+ tests passing\n\n### Phase 4: Integration & Release âœ…\n- InsertLinks implementation\n- Real-world integration tests\n- Complete XML documentation\n- NuGet packaging\n- DI extensions\n- 75+ tests passing\n\n## Gap Decisions Implemented\n\n1. âœ… Error Handling: Hybrid approach (strict init, lenient parse)\n2. âœ… Thread Safety: Immutable design with ImmutableDictionary\n3. âœ… DI Integration: Optional extensions package with ICitator\n4. âœ… Regex Timeout: 1-second default\n5. âœ… CI/CD: GitHub Actions workflows\n6. âœ… Memory: Streaming IEnumerable pattern\n7. âœ… Logging: Serilog integration\n\n## Ready for Release\n\n- [ ] GitHub repository created\n- [ ] CI/CD workflows tested\n- [ ] NuGet.org API key obtained\n- [ ] Package published to NuGet\n- [ ] GitHub release v1.0.0 created\n- [ ] Documentation site (optional)\n\n## Post-Launch Tasks\n\n1. Publish to NuGet.org\n2. Create GitHub release\n3. Contact Python author (Simon Raindrum Sherred)\n4. Integrate with CourtListener MCP server\n5. Post on legal tech forums\n\n---\n\n**ðŸŽ‰ PROJECT COMPLETE - Ready for Production Use**\n```\n\n### Verification\n- [ ] Both packages build successfully\n- [ ] Local installation works\n- [ ] DI extensions functional\n- [ ] XML docs in package\n- [ ] CHANGELOG created\n- [ ] Completion summary created\n- [ ] All 75+ tests pass",

  "successCriteria": [
    "CiteUrl.Core NuGet package builds",
    "CiteUrl.Extensions.DependencyInjection package builds",
    "DI extensions with services.AddCiteUrl() work",
    "Local installation successful",
    "IntelliSense shows XML docs",
    "CHANGELOG.md created",
    "Completion summary document created",
    "All tests pass (75+)",
    "No compilation warnings"
  ],

  "associatedArtifacts": [
    {
      "type": "source_file",
      "path": "src/CiteUrl.Extensions.DependencyInjection/ServiceCollectionExtensions.cs",
      "description": "DI registration extensions"
    },
    {
      "type": "source_file",
      "path": "src/CiteUrl.Extensions.DependencyInjection/CiteUrlOptions.cs",
      "description": "Configuration options class"
    },
    {
      "type": "package",
      "path": "src/CiteUrl.Core/bin/Release/CiteUrl.Core.1.0.0.nupkg",
      "description": "Core library NuGet package"
    },
    {
      "type": "package",
      "path": "src/CiteUrl.Extensions.DependencyInjection/bin/Release/CiteUrl.Extensions.DependencyInjection.1.0.0.nupkg",
      "description": "DI extensions NuGet package"
    },
    {
      "type": "documentation",
      "path": "CHANGELOG.md",
      "description": "Version history and release notes"
    },
    {
      "type": "completion_summary",
      "path": ".featurePlans/CiteUrl/ingestion_completionSummary_[timestamp].md",
      "description": "Final project completion summary"
    }
  ]
}
