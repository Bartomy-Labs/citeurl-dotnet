{
  "id": "1.1",
  "title": "Project Setup and Solution Structure",
  "objective": "Create .NET 9 solution with core library, DI extensions, test projects, and CI/CD infrastructure",
  "complexity": "moderate",
  "phaseId": "1",
  "taskNumber": 1,
  "totalTasksInPhase": 3,

  "metadata": {
    "taskType": "setup",
    "estimatedDuration": "2-3 hours",
    "dependencies": [],
    "requiredTools": ["dotnet CLI", "git"],
    "skillLevel": "intermediate"
  },

  "contextManagement": {
    "isFirstInPhase": true,
    "isLastInPhase": false,
    "requiredContext": [
      "Implementation plan with gap analysis decisions",
      "Target framework: .NET 9",
      "Project structure: Core + DI Extensions + Tests"
    ],
    "contextToPreserve": [
      "Solution structure created",
      "Project dependencies established",
      "CI/CD workflows configured"
    ]
  },

  "criticalAnchors": [
    "IMMUTABLE: .NET 9 target framework (not .NET 8, not multi-targeting)",
    "IMMUTABLE: MIT license with attribution to Simon Raindrum Sherred",
    "IMMUTABLE: YamlDotNet + Serilog as only core dependencies",
    "IMMUTABLE: Nullable reference types enabled throughout",
    "IMMUTABLE: C# 13 language version",
    "IMMUTABLE: Three projects: CiteUrl.Core, CiteUrl.Extensions.DependencyInjection, CiteUrl.Core.Tests",
    "IMMUTABLE: GitHub Actions for CI/CD"
  ],

  "agentInstructions": "## Task 1.1: Project Setup and Solution Structure\n\n### Overview\nYou will create a complete .NET 9 solution structure with three projects, configure dependencies, set up CI/CD workflows, and establish the foundational directory structure for the CiteUrl.NET library.\n\n### Step-by-Step Instructions\n\n#### STEP 1: Create Solution File\n```bash\ndotnet new sln -n CiteUrl\n```\n\n#### STEP 2: Create Core Library Project\n```bash\nmkdir -p src/CiteUrl.Core\ncd src/CiteUrl.Core\ndotnet new classlib -f net9.0 -n CiteUrl.Core\ncd ../..\n```\n\n**Configure CiteUrl.Core.csproj:**\n```xml\n<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFramework>net9.0</TargetFramework>\n    <LangVersion>13</LangVersion>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <GenerateDocumentationFile>true</GenerateDocumentationFile>\n    <NoWarn>$(NoWarn);1591</NoWarn>\n    \n    <!-- NuGet Package Metadata -->\n    <GeneratePackageOnBuild>false</GeneratePackageOnBuild>\n    <PackageId>CiteUrl.Core</PackageId>\n    <Version>1.0.0-alpha.1</Version>\n    <Authors>Your Name</Authors>\n    <Description>Legal citation parser for .NET - C# port of Python citeurl library. Supports 130+ citation formats including US federal/state case law, statutes, and regulations.</Description>\n    <PackageLicenseExpression>MIT</PackageLicenseExpression>\n    <PackageProjectUrl>https://github.com/yourusername/citeurl-dotnet</PackageProjectUrl>\n    <RepositoryUrl>https://github.com/yourusername/citeurl-dotnet</RepositoryUrl>\n    <RepositoryType>git</RepositoryType>\n    <PackageTags>legal;citation;parser;bluebook;yaml;law;case-law;statutes</PackageTags>\n    <PackageReadmeFile>README.md</PackageReadmeFile>\n    <IncludeSymbols>true</IncludeSymbols>\n    <SymbolPackageFormat>snupkg</SymbolPackageFormat>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"YamlDotNet\" Version=\"16.1.3\" />\n    <PackageReference Include=\"Serilog\" Version=\"4.0.2\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <EmbeddedResource Include=\"Templates\\Resources\\*.yaml\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <None Include=\"..\\..\\README.md\" Pack=\"true\" PackagePath=\"\\\" />\n  </ItemGroup>\n</Project>\n```\n\n#### STEP 3: Create DI Extensions Project\n```bash\nmkdir -p src/CiteUrl.Extensions.DependencyInjection\ncd src/CiteUrl.Extensions.DependencyInjection\ndotnet new classlib -f net9.0 -n CiteUrl.Extensions.DependencyInjection\ncd ../..\n```\n\n**Configure CiteUrl.Extensions.DependencyInjection.csproj:**\n```xml\n<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFramework>net9.0</TargetFramework>\n    <LangVersion>13</LangVersion>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <GenerateDocumentationFile>true</GenerateDocumentationFile>\n    \n    <!-- NuGet Package Metadata -->\n    <PackageId>CiteUrl.Extensions.DependencyInjection</PackageId>\n    <Version>1.0.0-alpha.1</Version>\n    <Description>Dependency injection extensions for CiteUrl.Core library</Description>\n    <PackageLicenseExpression>MIT</PackageLicenseExpression>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <ProjectReference Include=\"..\\CiteUrl.Core\\CiteUrl.Core.csproj\" />\n    <PackageReference Include=\"Microsoft.Extensions.DependencyInjection.Abstractions\" Version=\"9.0.0\" />\n    <PackageReference Include=\"Microsoft.Extensions.Options\" Version=\"9.0.0\" />\n  </ItemGroup>\n</Project>\n```\n\n#### STEP 4: Create Test Project\n```bash\nmkdir -p tests/CiteUrl.Core.Tests\ncd tests/CiteUrl.Core.Tests\ndotnet new xunit -f net9.0 -n CiteUrl.Core.Tests\ncd ../..\n```\n\n**Configure CiteUrl.Core.Tests.csproj:**\n```xml\n<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFramework>net9.0</TargetFramework>\n    <Nullable>enable</Nullable>\n    <IsPackable>false</IsPackable>\n    <IsTestProject>true</IsTestProject>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"coverlet.collector\" Version=\"6.0.2\" />\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.11.1\" />\n    <PackageReference Include=\"Shouldly\" Version=\"4.2.1\" />\n    <PackageReference Include=\"xunit\" Version=\"2.9.0\" />\n    <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.8.2\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <ProjectReference Include=\"..\\..\\src\\CiteUrl.Core\\CiteUrl.Core.csproj\" />\n  </ItemGroup>\n</Project>\n```\n\n#### STEP 5: Add Projects to Solution\n```bash\ndotnet sln add src/CiteUrl.Core/CiteUrl.Core.csproj\ndotnet sln add src/CiteUrl.Extensions.DependencyInjection/CiteUrl.Extensions.DependencyInjection.csproj\ndotnet sln add tests/CiteUrl.Core.Tests/CiteUrl.Core.Tests.csproj\n```\n\n#### STEP 6: Create Directory Structure\n```bash\nmkdir -p src/CiteUrl.Core/Models\nmkdir -p src/CiteUrl.Core/Templates\nmkdir -p src/CiteUrl.Core/Tokens\nmkdir -p src/CiteUrl.Core/Utilities\nmkdir -p src/CiteUrl.Core/Templates/Resources\nmkdir -p src/CiteUrl.Core/Exceptions\n```\n\n#### STEP 7: Create GitHub Actions Workflows\n\n**Create `.github/workflows/ci.yml`:**\n```yaml\nname: CI Build and Test\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    \n    steps:\n    - uses: actions/checkout@v4\n    \n    - name: Setup .NET 9\n      uses: actions/setup-dotnet@v4\n      with:\n        dotnet-version: '9.0.x'\n    \n    - name: Restore dependencies\n      run: dotnet restore\n    \n    - name: Build\n      run: dotnet build --no-restore --configuration Release\n    \n    - name: Test\n      run: dotnet test --no-build --configuration Release --verbosity normal --collect:\"XPlat Code Coverage\"\n    \n    - name: Upload coverage to Codecov\n      uses: codecov/codecov-action@v4\n      with:\n        file: ./tests/CiteUrl.Core.Tests/TestResults/*/coverage.cobertura.xml\n```\n\n**Create `.github/workflows/release.yml`:**\n```yaml\nname: Release and Publish\n\non:\n  push:\n    tags:\n      - 'v*.*.*'\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    \n    steps:\n    - uses: actions/checkout@v4\n    \n    - name: Setup .NET 9\n      uses: actions/setup-dotnet@v4\n      with:\n        dotnet-version: '9.0.x'\n    \n    - name: Extract version from tag\n      id: get_version\n      run: echo \"VERSION=${GITHUB_REF#refs/tags/v}\" >> $GITHUB_OUTPUT\n    \n    - name: Restore dependencies\n      run: dotnet restore\n    \n    - name: Build\n      run: dotnet build --configuration Release --no-restore /p:Version=${{ steps.get_version.outputs.VERSION }}\n    \n    - name: Test\n      run: dotnet test --configuration Release --no-build\n    \n    - name: Pack\n      run: dotnet pack --configuration Release --no-build /p:Version=${{ steps.get_version.outputs.VERSION }}\n    \n    - name: Publish to NuGet\n      run: |\n        dotnet nuget push src/CiteUrl.Core/bin/Release/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate\n        dotnet nuget push src/CiteUrl.Extensions.DependencyInjection/bin/Release/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate\n```\n\n**Create `.github/dependabot.yml`:**\n```yaml\nversion: 2\nupdates:\n  - package-ecosystem: \"nuget\"\n    directory: \"/\"\n    schedule:\n      interval: \"weekly\"\n    open-pull-requests-limit: 10\n```\n\n#### STEP 8: Create .editorconfig\n```ini\nroot = true\n\n[*]\ncharset = utf-8\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.{cs,csx,vb,vbx}]\nindent_style = space\nindent_size = 4\n\n[*.cs]\n# Naming conventions\ndotnet_naming_rule.interfaces_should_be_pascal_case.severity = warning\ndotnet_naming_rule.interfaces_should_be_pascal_case.symbols = interface\ndotnet_naming_rule.interfaces_should_be_pascal_case.style = begins_with_i\n\ndotnet_naming_symbols.interface.applicable_kinds = interface\ndotnet_naming_style.begins_with_i.required_prefix = I\ndotnet_naming_style.begins_with_i.capitalization = pascal_case\n\n# Nullable reference types\ncsharp_nullable_reference_types = enable\n\n# Code style\ncsharp_prefer_braces = true:warning\ncsharp_using_directive_placement = outside_namespace:warning\n```\n\n#### STEP 9: Create README.md\n```markdown\n# CiteUrl.NET\n\nA .NET 9 library for parsing and hyperlinking legal citations. This is a C# port of the Python [citeurl](https://github.com/raindrum/citeurl) library by Simon Raindrum Sherred.\n\n## Features\n\n- **130+ Citation Formats**: US federal and state case law, statutes, regulations, and more\n- **YAML-Based Templates**: Extensible citation patterns via YAML configuration\n- **Thread-Safe**: Fully immutable design for concurrent use\n- **Memory Efficient**: Streaming enumeration for large documents\n- **DI-Friendly**: Optional dependency injection extensions\n- **Regex Timeout Protection**: Built-in ReDoS protection\n\n## Installation\n\n```bash\ndotnet add package CiteUrl.Core\n```\n\nFor dependency injection support:\n```bash\ndotnet add package CiteUrl.Extensions.DependencyInjection\n```\n\n## Quick Start\n\n```csharp\nusing CiteUrl.Core;\n\n// Find first citation\nvar citation = Citator.Cite(\"See 42 U.S.C. § 1983 for details.\");\nConsole.WriteLine(citation?.Url); // https://www.law.cornell.edu/uscode/text/42/1983\n\n// Find all citations\nvar text = \"Federal law, 42 U.S.C. § 1983, provides remedies.\";\nforeach (var cite in Citator.Default.ListCitations(text))\n{\n    Console.WriteLine($\"{cite.Name} -> {cite.Url}\");\n}\n```\n\n## License\n\nMIT License. Original Python library by Simon Raindrum Sherred.\n\n## Status\n\n🚧 **Alpha** - In active development\n```\n\n#### STEP 10: Create .gitignore\n```\nbin/\nobj/\n.vs/\n*.user\n*.suo\n*.userosscache\n*.sln.docstates\n.vscode/\n*.swp\n*~\nTestResults/\ncoverage/\n*.nupkg\n```\n\n#### STEP 11: Delete Auto-Generated Files\n```bash\n# Remove default Class1.cs files\nrm src/CiteUrl.Core/Class1.cs\nrm src/CiteUrl.Extensions.DependencyInjection/Class1.cs\nrm tests/CiteUrl.Core.Tests/UnitTest1.cs\n```\n\n#### STEP 12: Verify Build\n```bash\ndotnet restore\ndotnet build\ndotnet test\n```\n\n### Verification Checklist\n- [ ] Solution builds without errors\n- [ ] All three projects reference each other correctly\n- [ ] NuGet packages restore successfully (YamlDotNet, Serilog, xUnit, Shouldly)\n- [ ] Test project runs (0 tests initially - this is expected)\n- [ ] GitHub workflows directory created with 3 files\n- [ ] README.md exists with project description\n- [ ] Directory structure created (Models, Templates, Tokens, Utilities, Exceptions)\n\n### Post-Task Actions\nNone - proceed to Task 1.2",

  "successCriteria": [
    "Solution builds without errors using 'dotnet build'",
    "All projects target .NET 9.0 exclusively",
    "NuGet packages restore successfully (YamlDotNet 16.1.3+, Serilog 4.0.2+)",
    "Test project runs with 'dotnet test' (0 tests is acceptable)",
    "GitHub Actions workflows created (.github/workflows/ci.yml, release.yml)",
    "Directory structure exists: Models/, Templates/, Tokens/, Utilities/, Exceptions/",
    "Nullable reference types enabled in all project files",
    "README.md contains project description and attribution",
    ".gitignore excludes bin/, obj/, .vs/, TestResults/"
  ],

  "pauseAndAskScenarios": [
    "If .NET 9 SDK is not installed on the system",
    "If YamlDotNet or Serilog package versions are incompatible",
    "If GitHub repository URL is unknown (needed for .csproj metadata)"
  ],

  "executionControls": {
    "scopeAndBoundaries": {
      "mustImplement": [
        "Create exactly three projects: Core, DI Extensions, Tests",
        "Use .NET 9 as target framework (not multi-targeting)",
        "Add YamlDotNet and Serilog to Core project only",
        "Configure GitHub Actions for CI/CD"
      ],
      "mustNotImplement": [
        "Do not add additional dependencies beyond YamlDotNet and Serilog to Core",
        "Do not create additional projects",
        "Do not target multiple frameworks",
        "Do not skip nullable reference types"
      ],
      "flexible": [
        "Exact version numbers of NuGet packages (use latest stable)",
        "Author name in package metadata",
        "GitHub repository URL"
      ]
    },
    "riskFactors": [
      {
        "risk": ".NET 9 SDK not available",
        "mitigation": "Verify dotnet --version shows 9.0.x before starting",
        "severity": "high"
      },
      {
        "risk": "YamlDotNet version compatibility",
        "mitigation": "Use version 16.1.3 or later, verify with dotnet restore",
        "severity": "medium"
      }
    ],
    "qualityGates": [
      "Solution must compile without warnings",
      "All project files must have <Nullable>enable</Nullable>",
      "GitHub Actions workflows must be valid YAML"
    ]
  },

  "associatedArtifacts": [
    {
      "type": "solution_file",
      "path": "CiteUrl.sln",
      "description": "Main solution file containing all three projects"
    },
    {
      "type": "project_file",
      "path": "src/CiteUrl.Core/CiteUrl.Core.csproj",
      "description": "Core library project with YamlDotNet and Serilog dependencies"
    },
    {
      "type": "project_file",
      "path": "src/CiteUrl.Extensions.DependencyInjection/CiteUrl.Extensions.DependencyInjection.csproj",
      "description": "DI extensions project with Microsoft.Extensions.DependencyInjection dependency"
    },
    {
      "type": "project_file",
      "path": "tests/CiteUrl.Core.Tests/CiteUrl.Core.Tests.csproj",
      "description": "Test project with xUnit, Shouldly, and coverlet"
    },
    {
      "type": "github_workflow",
      "path": ".github/workflows/ci.yml",
      "description": "CI workflow for build, test, and code coverage"
    },
    {
      "type": "github_workflow",
      "path": ".github/workflows/release.yml",
      "description": "Release workflow for NuGet publishing on tag push"
    },
    {
      "type": "configuration",
      "path": ".editorconfig",
      "description": "C# code style configuration"
    },
    {
      "type": "documentation",
      "path": "README.md",
      "description": "Project README with installation and usage instructions"
    }
  ]
}
